{"is_source_file": true, "format": "Python", "description": "This file is a FastAPI router module that defines API endpoints for interacting with Confluence, including operations such as checking connection status, searching resources, creating resources, OAuth login/callback, and fetching resources by key. It relies on a ConfluenceConnector class for backend logic and integrates with a database dependency.", "external_files": ["src.connectors.base.models", "src.connectors.confluence.impl", "src.db.config"], "external_methods": ["get_db", "ConnectionStatus", "SearchResultItem", "CreateResult", "ConfluenceConnector.oauth_authorize_url", "ConfluenceConnector.connection_status", "ConfluenceConnector.search", "ConfluenceConnector.create", "ConfluenceConnector.oauth_callback", "ConfluenceConnector.get_resource"], "published": ["router"], "classes": [{"name": "APIRouter", "description": "FastAPI's router class used to define route endpoints in this module."}], "methods": [{"name": "ConnectionStatus get_status(request: Request, db=Depends(get_db), tenant_id: Optional[str] = Query(None))", "description": "Returns the connection status of the Confluence connector for the specified tenant.", "scope": "", "scopeKind": ""}, {"name": "List[SearchResultItem] search( request: Request, q: str = Query(\"\", description=\"Search query\"), limit: int = Query(10, ge=1, le=25), filters: Optional[str] = Query(None, description=\"Optional JSON string of filter mapping\"), tenant_id: Optional[str] = Query(None), db=Depends(get_db), )", "description": "Performs a search on Confluence resources based on query parameters and returns a list of search result items.", "scope": "", "scopeKind": ""}, {"name": "CreateResult create_resource( request: Request, payload: Dict[str, Any], tenant_id: Optional[str] = Query(None), db=Depends(get_db), )", "description": "Creates a new Confluence resource with provided payload and returns the result.", "scope": "", "scopeKind": ""}, {"name": "oauth_login( request: Request, tenant_id: Optional[str] = Query(None), state: Optional[str] = Query(None), scopes: Optional[str] = Query(None), redirect: Optional[bool] = Query(False), db=Depends(get_db), )", "description": "Initiates OAuth login process by generating an authorization URL, optionally redirecting.", "scope": "", "scopeKind": ""}, {"name": "ConnectionStatus oauth_callback( request: Request, code: Optional[str] = Query(None), state: Optional[str] = Query(None), tenant_id: Optional[str] = Query(None), db=Depends(get_db), )", "description": "Handles OAuth callback, processes authorization code, and stores tokens.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] get_resource( request: Request, key: str, tenant_id: Optional[str] = Query(None), db=Depends(get_db) )", "description": "Fetches a Confluence resource by its key.", "scope": "", "scopeKind": ""}, {"name": "str _resolve_tenant_id(request: Request, tenant_id_qs: Optional[str])", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["ConfluenceConnector().with_db", "connector.connection_status", "connector.search", "connector.create", "connector.oauth_authorize_url", "connector.oauth_callback", "connector.get_resource"], "search-terms": ["FastAPI", "Confluence", "OAuth", "search", "connection status", "resource creation", "resource fetch", "confluence router"], "state": 2, "file_id": 27, "knowledge_revision": 148, "git_revision": "", "ctags": [{"_type": "tag", "name": "_resolve_tenant_id", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/router.py", "pattern": "/^def _resolve_tenant_id(request: Request, tenant_id_qs: Optional[str]) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(request: Request, tenant_id_qs: Optional[str])"}, {"_type": "tag", "name": "create_resource", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/router.py", "pattern": "/^def create_resource($/", "language": "Python", "typeref": "typename:CreateResult", "kind": "function", "signature": "( request: Request, payload: Dict[str, Any], tenant_id: Optional[str] = Query(None), db=Depends(get_db), )"}, {"_type": "tag", "name": "get_resource", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/router.py", "pattern": "/^def get_resource($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( request: Request, key: str, tenant_id: Optional[str] = Query(None), db=Depends(get_db) )"}, {"_type": "tag", "name": "get_status", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/router.py", "pattern": "/^def get_status(request: Request, db=Depends(get_db), tenant_id: Optional[str] = Query(None)) -> /", "language": "Python", "typeref": "typename:ConnectionStatus", "kind": "function", "signature": "(request: Request, db=Depends(get_db), tenant_id: Optional[str] = Query(None))"}, {"_type": "tag", "name": "oauth_callback", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/router.py", "pattern": "/^def oauth_callback($/", "language": "Python", "typeref": "typename:ConnectionStatus", "kind": "function", "signature": "( request: Request, code: Optional[str] = Query(None), state: Optional[str] = Query(None), tenant_id: Optional[str] = Query(None), db=Depends(get_db), )"}, {"_type": "tag", "name": "oauth_login", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/router.py", "pattern": "/^def oauth_login($/", "language": "Python", "kind": "function", "signature": "( request: Request, tenant_id: Optional[str] = Query(None), state: Optional[str] = Query(None), scopes: Optional[str] = Query(None), redirect: Optional[bool] = Query(False), db=Depends(get_db), )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/router.py", "pattern": "/^router = APIRouter(prefix=\"\\/confluence\", tags=[\"Connectors\", \"Confluence\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "search", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/router.py", "pattern": "/^def search($/", "language": "Python", "typeref": "typename:List[SearchResultItem]", "kind": "function", "signature": "( request: Request, q: str = Query(\"\", description=\"Search query\"), limit: int = Query(10, ge=1, le=25), filters: Optional[str] = Query(None, description=\"Optional JSON string of filter mapping\"), tenant_id: Optional[str] = Query(None), db=Depends(get_db), )"}], "hash": "f9e6dec7bc49e118cf4e6988736272f4", "format-version": 4, "code-base-name": "integration_backend", "filename": "integration_backend/src/connectors/confluence/router.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/confluence\", tags=[\"Connectors\", \"Confluence\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"148": ""}]}