{"is_source_file": true, "format": "Python", "description": "This file provides database operations for managing encrypted OAuth tokens associated with connectors and tenants. It includes functions to save, retrieve, and delete tokens, utilizing SQLAlchemy ORM and custom encryption/decryption helpers.", "external_files": ["src.connectors.base.security", "./models"], "external_methods": ["encrypt_json", "decrypt_json"], "published": ["save_tokens", "get_tokens", "get_token_record", "delete_tokens"], "classes": [{"name": "ConnectorToken", "description": "An ORM model representing stored connector tokens with associated metadata."}], "methods": [{"name": "ConnectorToken save_tokens( db: Session, connector_id: str, tenant_id: str, tokens: Dict[str, Any], scopes: Optional[str] = None, expires_at: Optional[int] = None, metadata: Optional[Dict[str, Any]] = None, )", "description": "Persists tokens for a connector tenant, encrypting them and performing an upsert based on the connector and tenant IDs.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,Any]] get_tokens( db: Session, connector_id: str, tenant_id: str )", "description": "Retrieves and decrypts tokens for a specified connector and tenant, returning None if not found or on decryption error.", "scope": "", "scopeKind": ""}, {"name": "Optional[ConnectorToken] get_token_record( db: Session, connector_id: str, tenant_id: str )", "description": "Fetches the raw token record with metadata and expiry information without decrypting the token payload.", "scope": "", "scopeKind": ""}, {"name": "int delete_tokens(db: Session, connector_id: str, tenant_id: str)", "description": "Deletes stored tokens for a specific connector and tenant, returning the number of rows deleted.", "scope": "", "scopeKind": ""}], "calls": ["select(ConnectorToken)", "db.execute()", "db.commit()", "db.refresh()", "decrypt_json()", "encrypt_json()", "json.dumps()", "select().where()", "delete()"], "search-terms": ["TokenStore", "encrypted tokens", "ConnectorToken ORM", "save_tokens", "get_tokens", "delete_tokens"], "state": 2, "file_id": 23, "knowledge_revision": 163, "git_revision": "050999a09b790ceb7c6b7f96d5411b60fcdc74b2", "revision_history": [{"140": ""}, {"163": "050999a09b790ceb7c6b7f96d5411b60fcdc74b2"}], "ctags": [{"_type": "tag", "name": "delete_tokens", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def delete_tokens(db: Session, connector_id: str, tenant_id: str) -> int:$/", "language": "Python", "typeref": "typename:int", "kind": "function", "signature": "(db: Session, connector_id: str, tenant_id: str)"}, {"_type": "tag", "name": "get_token_record", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def get_token_record($/", "language": "Python", "typeref": "typename:Optional[ConnectorToken]", "kind": "function", "signature": "( db: Session, connector_id: str, tenant_id: str )"}, {"_type": "tag", "name": "get_tokens", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def get_tokens($/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "function", "signature": "( db: Session, connector_id: str, tenant_id: str )"}, {"_type": "tag", "name": "save_tokens", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def save_tokens($/", "language": "Python", "typeref": "typename:ConnectorToken", "kind": "function", "signature": "( db: Session, connector_id: str, tenant_id: str, tokens: Dict[str, Any], scopes: Optional[str] = None, expires_at: Optional[int] = None, metadata: Optional[Dict[str, Any]] = None, )"}], "hash": "dc29d2b4d0952bdaa189e4c1cba43d14", "format-version": 4, "code-base-name": "integration_backend", "filename": "integration_backend/src/db/token_store.py"}