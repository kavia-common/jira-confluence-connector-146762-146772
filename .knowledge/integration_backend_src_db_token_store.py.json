{"is_source_file": true, "format": "Python", "description": "This file provides a thread-safe in-memory token storage for connector tokens, including classes and functions for saving, retrieving, and managing tokens associated with tenants and providers in a Jira connector context.", "external_files": ["typing", "dataclasses", "threading", "time"], "external_methods": ["time.time()"], "published": ["save_tokens", "get_tokens", "get_token_record", "TokenStore"], "classes": [{"name": "TokenRecord", "description": "A lightweight data class representing a stored token record with fields for connector_id, tenant_id, scopes, expires_at, and last_error."}, {"name": "TokenStore", "description": "A simple thread-safe class for storing and managing tokens keyed by tenant and provider."}], "methods": [{"name": "None save_tokens( db: Any, connector_id: str, tenant_id: str, tokens: Dict[str, Any], scopes: Optional[str] = None, expires_at: Optional[int] = None, metadata: Optional[Dict[str, Any]] = None, encrypted: bool = False, )", "description": "Saves or updates tokens for a specific tenant and connector, storing access tokens, refresh tokens, scopes, expiry, and optional metadata.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,Any]] get_tokens( db: Any, connector_id: str, tenant_id: str, )", "description": "Retrieves stored token information for a specific tenant and connector as a dictionary, or None if not found.", "scope": "", "scopeKind": ""}, {"name": "Optional[TokenRecord] get_token_record( db: Any, connector_id: str, tenant_id: str, )", "description": "Returns a TokenRecord object for a given tenant and connector, encapsulating token details.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,Any]] get_token(self, tenant_id: str, provider: str)", "description": "Method of TokenStore: retrieves a shallow copy of token data for a tenant and provider.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "None save_token(self, tenant_id: str, provider: str, record: Dict[str, Any])", "description": "Method of TokenStore: saves or updates a token record for a tenant and provider, normalizing scope representations.", "scope": "TokenStore", "scopeKind": "class"}, {"name": "None delete_token(self, tenant_id: str, provider: str)", "description": "Method of TokenStore: deletes a token record for a given tenant and provider.", "scope": "TokenStore", "scopeKind": "class"}], "calls": ["time.time()"], "search-terms": ["TokenStore", "in-memory token storage", "thread-safe token management", "Jira connector tokens", "tenant_id provider_id tokens"], "state": 2, "file_id": 23, "knowledge_revision": 483, "git_revision": "34482e767cebdcde729a8bc5d9f63e49cd77bc67", "revision_history": [{"140": ""}, {"163": "050999a09b790ceb7c6b7f96d5411b60fcdc74b2"}, {"166": "b4173be147978e9b274a64e19f6a629e069e2c64"}, {"328": "b4173be147978e9b274a64e19f6a629e069e2c64"}, {"338": "98c6b59c7482973cee0153f948eb6d1b34db4a07"}, {"339": "98c6b59c7482973cee0153f948eb6d1b34db4a07"}, {"340": "98c6b59c7482973cee0153f948eb6d1b34db4a07"}, {"348": "a66d8e0c27284d04b8803b4d6f46d3b1e2da6df1"}, {"483": "34482e767cebdcde729a8bc5d9f63e49cd77bc67"}], "ctags": [{"_type": "tag", "name": "TokenRecord", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^class TokenRecord:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TokenStore", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^class TokenStore:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_LOCK", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^_LOCK = threading.Lock()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_STORE", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^_STORE: Dict[str, Dict[str, Dict[str, Any]]] = {}$/", "language": "Python", "typeref": "typename:Dict[str, Dict[str, Dict[str, Any]]]", "kind": "variable"}, {"_type": "tag", "name": "delete_token", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^    def delete_token(self, tenant_id: str, provider: str) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, tenant_id: str, provider: str)", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "expires_at", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^    expires_at: Optional[int] = None$/", "language": "Python", "typeref": "typename:Optional[int]", "kind": "variable", "scope": "TokenRecord", "scopeKind": "class"}, {"_type": "tag", "name": "get_token", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^    def get_token(self, tenant_id: str, provider: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, tenant_id: str, provider: str)", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "get_token_record", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def get_token_record($/", "language": "Python", "typeref": "typename:Optional[TokenRecord]", "kind": "function", "signature": "( db: Any, connector_id: str, tenant_id: str, )"}, {"_type": "tag", "name": "get_tokens", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def get_tokens($/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "function", "signature": "( db: Any, connector_id: str, tenant_id: str, )"}, {"_type": "tag", "name": "last_error", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^    last_error: Optional[str] = None$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "variable", "scope": "TokenRecord", "scopeKind": "class"}, {"_type": "tag", "name": "save_token", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^    def save_token(self, tenant_id: str, provider: str, record: Dict[str, Any]) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, tenant_id: str, provider: str, record: Dict[str, Any])", "scope": "TokenStore", "scopeKind": "class"}, {"_type": "tag", "name": "save_tokens", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def save_tokens($/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "( db: Any, connector_id: str, tenant_id: str, tokens: Dict[str, Any], scopes: Optional[str] = None, expires_at: Optional[int] = None, metadata: Optional[Dict[str, Any]] = None, encrypted: bool = False, )"}, {"_type": "tag", "name": "scopes", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^    scopes: Optional[str] = None   # stored as space-separated string$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "variable", "scope": "TokenRecord", "scopeKind": "class"}], "hash": "4e5150d806b61a47aede9c56dee94463", "format-version": 4, "code-base-name": "integration_backend", "filename": "integration_backend/src/db/token_store.py", "fields": [{"name": "_LOCK = threading.Lock()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str, Dict[str, Dict[str, Any]]] _STORE", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Optional[int] expires_at", "scope": "TokenRecord", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[str] last_error", "scope": "TokenRecord", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[str] scopes", "scope": "TokenRecord", "scopeKind": "class", "description": "unavailable"}]}