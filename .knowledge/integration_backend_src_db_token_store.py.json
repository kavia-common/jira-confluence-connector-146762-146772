{"is_source_file": true, "format": "Python", "description": "This file implements an in-memory token store for managing OAuth tokens and metadata associated with connectors and tenants, including functions for saving, updating, retrieving, and deleting token data, as well as compatibility wrappers for database sessions.", "external_files": [], "external_methods": ["time"], "published": ["save_tokens", "save_tokens_db_aware", "update_meta", "get_tokens", "get_tokens_db_aware", "get_token_record", "delete_tokens", "list_connections"], "classes": [{"name": "_TokenRecord", "description": "A NamedTuple representing a token record with access token, refresh token, scopes, expiry, and last error."}], "methods": [{"name": "None save_tokens( connector: str, tenant_id: str, access_token: str, refresh_token: Optional[str] = None, expires_at: Optional[int] = None, scopes: Optional[List[str]] = None, base_url: Optional[str] = None, cloud_id: Optional[str] = None, last_error: Optional[str] = None, )", "description": "Stores or updates token data in the in-memory store for a specific connector and tenant.", "scope": "", "scopeKind": ""}, {"name": "None save_tokens_db_aware( *, db: Any, connector_id: str, tenant_id: str, tokens: Dict[str, Optional[str]], scopes: Optional[str] = None, expires_at: Optional[int] = None, metadata: Optional[Dict[str, Any]] = None, )", "description": "Compatibility wrapper that accepts a database session and token dictionary; currently maps to in-memory store.", "scope": "", "scopeKind": ""}, {"name": "None update_meta( connector: str, tenant_id: str, *, refreshed_at: Optional[int] = None, expires_at: Optional[int] = None, scopes: Optional[List[str]] = None, base_url: Optional[str] = None, cloud_id: Optional[str] = None, last_error: Optional[str] = None, )", "description": "Updates metadata fields such as expiry, scopes, URL, etc., for a stored connection.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,Any]] get_tokens(connector: str, tenant_id: str)", "description": "Retrieves token data for a given connector and tenant.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,Any]] get_tokens_db_aware(db: Any, connector: str, tenant_id: str)", "description": "Database-aware wrapper for get_tokens, accepts a db handle.", "scope": "", "scopeKind": ""}, {"name": "Optional[_TokenRecord] get_token_record(db: Any, connector_id: str, tenant_id: str)", "description": "Returns a named tuple of token info, compatible with previous database models.", "scope": "", "scopeKind": ""}, {"name": "None delete_tokens(connector: str, tenant_id: str)", "description": "Deletes stored tokens for a specific connector and tenant.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Dict[str,Any]] list_connections(connector: Optional[str] = None)", "description": "Lists all stored connections or those for a specific connector.", "scope": "", "scopeKind": ""}, {"name": "str _key(connector: str, tenant_id: str)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["time", "save_tokens", "scopes.split", "get_tokens", "get_tokens", "get_tokens", "get_tokens", "list_connections", "list_connections"], "search-terms": ["token store", "save_tokens", "get_tokens", "update_meta", "delete_tokens", "list_connections", "in-memory", "connectors", "tenant_id"], "state": 2, "file_id": 23, "knowledge_revision": 340, "git_revision": "98c6b59c7482973cee0153f948eb6d1b34db4a07", "revision_history": [{"140": ""}, {"163": "050999a09b790ceb7c6b7f96d5411b60fcdc74b2"}, {"166": "b4173be147978e9b274a64e19f6a629e069e2c64"}, {"328": "b4173be147978e9b274a64e19f6a629e069e2c64"}, {"338": "98c6b59c7482973cee0153f948eb6d1b34db4a07"}, {"339": "98c6b59c7482973cee0153f948eb6d1b34db4a07"}, {"340": "98c6b59c7482973cee0153f948eb6d1b34db4a07"}], "ctags": [{"_type": "tag", "name": "_STORE", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^_STORE: Dict[str, Dict[str, Any]] = {}$/", "language": "Python", "typeref": "typename:Dict[str, Dict[str, Any]]", "kind": "variable"}, {"_type": "tag", "name": "_TokenRecord", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^class _TokenRecord(NamedTuple):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_key", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def _key(connector: str, tenant_id: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(connector: str, tenant_id: str)"}, {"_type": "tag", "name": "delete_tokens", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def delete_tokens(connector: str, tenant_id: str) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(connector: str, tenant_id: str)"}, {"_type": "tag", "name": "get_token_record", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def get_token_record(db: Any, connector_id: str, tenant_id: str) -> Optional[_TokenRecord]:$/", "language": "Python", "typeref": "typename:Optional[_TokenRecord]", "kind": "function", "signature": "(db: Any, connector_id: str, tenant_id: str)"}, {"_type": "tag", "name": "get_tokens", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def get_tokens(connector: str, tenant_id: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "function", "signature": "(connector: str, tenant_id: str)"}, {"_type": "tag", "name": "get_tokens_db_aware", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def get_tokens_db_aware(db: Any, connector: str, tenant_id: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "function", "signature": "(db: Any, connector: str, tenant_id: str)"}, {"_type": "tag", "name": "list_connections", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def list_connections(connector: Optional[str] = None) -> Dict[str, Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Dict[str,Dict[str,Any]]", "kind": "function", "signature": "(connector: Optional[str] = None)"}, {"_type": "tag", "name": "save_tokens", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def save_tokens($/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "( connector: str, tenant_id: str, access_token: str, refresh_token: Optional[str] = None, expires_at: Optional[int] = None, scopes: Optional[List[str]] = None, base_url: Optional[str] = None, cloud_id: Optional[str] = None, last_error: Optional[str] = None, )"}, {"_type": "tag", "name": "save_tokens_db_aware", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def save_tokens_db_aware($/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "( *, db: Any, connector_id: str, tenant_id: str, tokens: Dict[str, Optional[str]], scopes: Optional[str] = None, expires_at: Optional[int] = None, metadata: Optional[Dict[str, Any]] = None, )"}, {"_type": "tag", "name": "update_meta", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/db/token_store.py", "pattern": "/^def update_meta($/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "( connector: str, tenant_id: str, *, refreshed_at: Optional[int] = None, expires_at: Optional[int] = None, scopes: Optional[List[str]] = None, base_url: Optional[str] = None, cloud_id: Optional[str] = None, last_error: Optional[str] = None, )"}], "hash": "5316cfbd5a37ef48942568fe668941f9", "format-version": 4, "code-base-name": "integration_backend", "filename": "integration_backend/src/db/token_store.py", "fields": [{"name": "Dict[str, Dict[str, Any]] _STORE", "scope": "", "scopeKind": "", "description": "unavailable"}]}