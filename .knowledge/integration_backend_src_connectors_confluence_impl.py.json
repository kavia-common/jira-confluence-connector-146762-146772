{"is_source_file": true, "format": "Python", "description": "This file implements a minimal Confluence client with methods for listing spaces, searching pages, and creating pages, along with custom error handling.", "external_files": ["requests"], "external_methods": ["requests.get", "requests.post"], "published": ["ConfluenceClient", "ConfluenceClientError"], "classes": [{"name": "ConfluenceClientError", "description": "Custom exception for errors encountered in the Confluence client, includes optional status code and retry-after information."}, {"name": "ConfluenceClient", "description": "A minimal client for interacting with Confluence API with methods for listing spaces, searching pages, and creating pages."}], "methods": [{"name": "ConfluenceClient.__init__", "description": "Initializes the ConfluenceClient with optional tokens, expiration, base URL, and timeout."}, {"name": "ConfluenceClient._headers", "description": "Constructs HTTP headers with optional authorization token."}, {"name": "ConfluenceClient._handle", "description": "Handles the HTTP response, raising custom errors if status indicates failure, and returns parsed JSON."}, {"name": "ConfluenceClient.list_spaces", "description": "Lists Confluence spaces with optional cursor for pagination."}, {"name": "ConfluenceClient.search", "description": "Performs a search query for pages, returning a list of page info."}, {"name": "ConfluenceClient.create", "description": "Creates a new Confluence page with the provided payload."}, {"name": "__init__(self, access_token: Optional[str], refresh_token: Optional[str], expires_at: Optional[int], base_url: Optional[str], timeout: int = 20)", "scope": "ConfluenceClient", "scopeKind": "class", "description": "unavailable"}, {"name": "__init__(self, message: str, status: Optional[int] = None, retry_after: Optional[int] = None)", "scope": "ConfluenceClientError", "scopeKind": "class", "description": "unavailable"}, {"name": "Dict[str,Any] _handle(self, resp: requests.Response)", "scope": "ConfluenceClient", "scopeKind": "class", "description": "unavailable"}, {"name": "Dict[str,str] _headers(self)", "scope": "ConfluenceClient", "scopeKind": "class", "description": "unavailable"}, {"name": "Dict[str,Any] create(self, payload: Dict[str, Any])", "scope": "ConfluenceClient", "scopeKind": "class", "description": "unavailable"}, {"name": "Dict[str,Any] list_spaces(self, limit: int = 25, cursor: Optional[str] = None)", "scope": "ConfluenceClient", "scopeKind": "class", "description": "unavailable"}, {"name": "List[Dict[str,Any]] search(self, q: str, limit: int = 10)", "scope": "ConfluenceClient", "scopeKind": "class", "description": "unavailable"}], "calls": ["requests.get", "requests.post"], "search-terms": ["Confluence API client", "list spaces", "search pages", "create page", "minimal client"], "state": 2, "file_id": 26, "knowledge_revision": 346, "git_revision": "a66d8e0c27284d04b8803b4d6f46d3b1e2da6df1", "revision_history": [{"146": ""}, {"337": "050999a09b790ceb7c6b7f96d5411b60fcdc74b2"}, {"341": "a66d8e0c27284d04b8803b4d6f46d3b1e2da6df1"}, {"346": "a66d8e0c27284d04b8803b4d6f46d3b1e2da6df1"}], "ctags": [{"_type": "tag", "name": "ConfluenceClient", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^class ConfluenceClient:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "ConfluenceClientError", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^class ConfluenceClientError(Exception):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def __init__(self, access_token: Optional[str], refresh_token: Optional[str], expires_at: Op/", "language": "Python", "kind": "member", "signature": "(self, access_token: Optional[str], refresh_token: Optional[str], expires_at: Optional[int], base_url: Optional[str], timeout: int = 20)", "scope": "ConfluenceClient", "scopeKind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def __init__(self, message: str, status: Optional[int] = None, retry_after: Optional[int] = /", "language": "Python", "kind": "member", "signature": "(self, message: str, status: Optional[int] = None, retry_after: Optional[int] = None)", "scope": "ConfluenceClientError", "scopeKind": "class"}, {"_type": "tag", "name": "_handle", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def _handle(self, resp: requests.Response) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, resp: requests.Response)", "scope": "ConfluenceClient", "scopeKind": "class"}, {"_type": "tag", "name": "_headers", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def _headers(self) -> Dict[str, str]:$/", "language": "Python", "typeref": "typename:Dict[str,str]", "kind": "member", "signature": "(self)", "scope": "ConfluenceClient", "scopeKind": "class"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def create(self, payload: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, payload: Dict[str, Any])", "scope": "ConfluenceClient", "scopeKind": "class"}, {"_type": "tag", "name": "list_spaces", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def list_spaces(self, limit: int = 25, cursor: Optional[str] = None) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, limit: int = 25, cursor: Optional[str] = None)", "scope": "ConfluenceClient", "scopeKind": "class"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "search", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def search(self, q: str, limit: int = 10) -> List[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "member", "signature": "(self, q: str, limit: int = 10)", "scope": "ConfluenceClient", "scopeKind": "class"}], "hash": "56a4ca14766573aa58104a991a17d5b7", "format-version": 4, "code-base-name": "integration_backend", "filename": "integration_backend/src/connectors/confluence/impl.py", "fields": [{"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}]}