{"is_source_file": true, "format": "Python", "description": "This file defines a Python class 'ConfluenceConnector' implementing a connector to Atlassian Confluence using OAuth 2.0. It includes methods for OAuth authorization, token exchange, token refresh, searching pages, creating pages, and retrieving resources, with dependencies on external modules for HTTP requests and OAuth configuration.", "external_files": ["src.connectors.base.interface", "src.connectors.base.models", "src.db.token_store", "src.api.oauth_config", "httpx", "fastapi"], "external_methods": ["get_confluence_oauth_config", "build_atlassian_authorize_url", "get_token_record", "save_tokens", "get_tokens"], "published": ["ConfluenceConnector"], "classes": [{"name": "ConfluenceConnector", "description": "Implementation of a connector to Atlassian Confluence, handling OAuth 2.0 authentication, token management, search, creation, and resource retrieval."}], "methods": [{"name": "str _default_scopes(self)", "description": "Returns the default OAuth scopes for Confluence.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "str oauth_authorize_url( self, tenant_id: str, state: Optional[str] = None, scopes: Optional[str] = None )", "description": "Generates the OAuth authorization URL with tenant ID, state, and scopes.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "ConnectionStatus oauth_callback( self, code: str, tenant_id: str, state: Optional[str] = None )", "description": "Handles OAuth callback, exchanges code for tokens, and saves tokens.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "ConnectionStatus connection_status(self, tenant_id: str)", "description": "Checks the current connection status and token validity for a tenant.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "ConnectionStatus refresh_token_if_needed(self, tenant_id: str)", "description": "Refreshes the OAuth access token if it is near expiration.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "List[SearchResultItem] search( self, query: str, tenant_id: str, limit: int = 10, filters: Optional[Dict[str, Any]] = None )", "description": "Performs a stubbed search operation returning mock search results.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "CreateResult create(self, payload: Dict[str, Any], tenant_id: str)", "description": "Creates a page in Confluence, with a stub implementation returning a dummy page.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] get_resource(self, key: str, tenant_id: str)", "description": "Retrieves metadata for a specific Confluence resource by key.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "\"ConfluenceConnector\" with_db(self, db)", "description": "Assigns the database handle to the connector instance.", "scope": "ConfluenceConnector", "scopeKind": "class"}], "calls": ["get_confluence_oauth_config", "build_atlassian_authorize_url", "get_token_record", "save_tokens", "get_tokens", "httpx.Client", "resp.json()", "ConnectionStatus", "HTTPException"], "search-terms": ["ConfluenceOAuth", "OAuth2.0", "ConfluencePageSearch", "TokenManagement", "OAuthCallback", "ConfluenceResourceRetrieval"], "state": 2, "file_id": 26, "knowledge_revision": 146, "git_revision": "", "ctags": [{"_type": "tag", "name": "ConfluenceConnector", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^class ConfluenceConnector(BaseConnector):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_default_scopes", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def _default_scopes(self) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "connection_status", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def connection_status(self, tenant_id: str) -> ConnectionStatus:$/", "language": "Python", "typeref": "typename:ConnectionStatus", "kind": "member", "signature": "(self, tenant_id: str)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "connector_id", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    connector_id: str = \"confluence\"$/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def create(self, payload: Dict[str, Any], tenant_id: str) -> CreateResult:$/", "language": "Python", "typeref": "typename:CreateResult", "kind": "member", "signature": "(self, payload: Dict[str, Any], tenant_id: str)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_resource", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def get_resource(self, key: str, tenant_id: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, key: str, tenant_id: str)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "oauth_authorize_url", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def oauth_authorize_url($/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "( self, tenant_id: str, state: Optional[str] = None, scopes: Optional[str] = None )", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "oauth_callback", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def oauth_callback($/", "language": "Python", "typeref": "typename:ConnectionStatus", "kind": "member", "signature": "( self, code: str, tenant_id: str, state: Optional[str] = None )", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "refresh_token_if_needed", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def refresh_token_if_needed(self, tenant_id: str) -> ConnectionStatus:$/", "language": "Python", "typeref": "typename:ConnectionStatus", "kind": "member", "signature": "(self, tenant_id: str)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "search", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def search($/", "language": "Python", "typeref": "typename:List[SearchResultItem]", "kind": "member", "signature": "( self, query: str, tenant_id: str, limit: int = 10, filters: Optional[Dict[str, Any]] = None )", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "with_db", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/confluence/impl.py", "pattern": "/^    def with_db(self, db) -> \"ConfluenceConnector\":$/", "language": "Python", "typeref": "typename:\"ConfluenceConnector\"", "kind": "member", "signature": "(self, db)", "scope": "ConfluenceConnector", "scopeKind": "class"}], "hash": "70a36ea029cf5b8d94682bf109359e3f", "format-version": 4, "code-base-name": "integration_backend", "filename": "integration_backend/src/connectors/confluence/impl.py", "fields": [{"name": "str connector_id", "scope": "ConfluenceConnector", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"146": ""}]}