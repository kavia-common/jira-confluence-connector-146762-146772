{"is_source_file": true, "format": "Python", "description": "This Python source file defines FastAPI API routes for managing connectors to Jira and Confluence. It includes endpoints for listing, retrieving, updating, deleting connections, and managing Jira and Confluence resources such as projects, searches, and creation actions. The file also exposes a minimal interface for a tool adapter to invoke specific connector operations.", "external_files": ["../schemas", "../errors", "...db.token_store", "...connectors.jira.client", "...connectors.confluence.impl"], "external_methods": ["TokenStore.get_token", "TokenStore.save_token", "TokenStore.delete_token", "JiraClient.refresh_token_if_needed", "JiraClient.list_projects", "JiraClient.search", "JiraClient.create", "ConfluenceClient.list_spaces", "ConfluenceClient.search", "ConfluenceClient.create", "http_error", "map_vendor_error"], "published": ["list_connectors", "get_connection", "patch_connection", "delete_connection", "list_jira_projects", "search_jira", "create_jira_resource", "list_confluence_spaces", "search_confluence", "create_confluence_resource", "invoke_tool"], "classes": [{"name": "OAuthState", "description": "Model for backend-generated OAuth state, including CSRF token, tenant, and nonce."}, {"name": "ConnectionPatch", "description": "Model for updating connection settings or rotating tokens."}, {"name": "ToolCall", "description": "Model for passing tool invocation data to the API."}], "methods": [{"name": "str _tenant(tenant_header: Optional[str])", "description": "Determine tenant ID from header or default.", "scope": "", "scopeKind": ""}, {"name": "ConnectionStatus _status_from_store(store: TokenStore, tenant_id: str, provider: str)", "description": "Retrieve connection status from token store.", "scope": "", "scopeKind": ""}, {"name": "List[Dict[str,Any]] list_connectors(x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"))", "description": "List available connectors with their connection status.", "scope": "", "scopeKind": ""}, {"name": "ConnectionStatus get_connection(provider: str, x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"))", "description": "Retrieve connection status for specified provider and tenant.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] patch_connection( provider: str, payload: ConnectionPatch = Body(...), x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), )", "description": "Update connection settings or rotate tokens for a provider.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] delete_connection(provider: str, x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"))", "description": "Remove stored tokens for a provider and tenant.", "scope": "", "scopeKind": ""}, {"name": "Tuple[JiraAuth,Dict[str,Any]] _jira_auth_for_tenant(store: TokenStore, tenant_id: str)", "description": "Retrieve Jira authentication credentials for tenant.", "scope": "", "scopeKind": ""}, {"name": "None _save_jira_auth(store: TokenStore, tenant_id: str, rec: Dict[str, Any], auth: JiraAuth)", "description": "Update stored Jira authentication info.", "scope": "", "scopeKind": ""}, {"name": "List[Dict[str,Any]] list_jira_projects( x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), limit: int = Query(25, ge=1, le=50), cursor: Optional[str] = Query(None), )", "description": "List Jira projects accessible with stored credentials.", "scope": "", "scopeKind": ""}, {"name": "List[SearchResultItem] search_jira( q: str = Query(\"\", description=\"Search JQL\"), limit: int = Query(10, ge=1, le=25), filters: Optional[str] = Query(None, description=\"Optional JSON string of filter mapping\"), x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), )", "description": "Search Jira resources with specified query and filters.", "scope": "", "scopeKind": ""}, {"name": "CreateResult create_jira_resource( payload: Dict[str, Any] = Body(...), x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), )", "description": "Create a Jira resource using provided payload.", "scope": "", "scopeKind": ""}, {"name": "List[Dict[str,Any]] list_confluence_spaces( x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), limit: int = Query(25, ge=1, le=50), cursor: Optional[str] = Query(None), )", "description": "List Confluence spaces accessible with stored credentials.", "scope": "", "scopeKind": ""}, {"name": "List[SearchResultItem] search_confluence( q: str = Query(\"\", description=\"Search query\"), limit: int = Query(10, ge=1, le=25), filters: Optional[str] = Query(None, description=\"Optional JSON string of filter mapping\"), x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), )", "description": "Search Confluence resources with query.", "scope": "", "scopeKind": ""}, {"name": "CreateResult create_confluence_resource( payload: Dict[str, Any] = Body(...), x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), )", "description": "Create a Confluence resource with provided payload.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] invoke_tool(payload: ToolCall, x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"))", "description": "Minimal interface to invoke connector operations as a tool.", "scope": "", "scopeKind": ""}], "calls": ["TokenStore.get_token", "TokenStore.save_token", "TokenStore.delete_token", "JiraClient.refresh_token_if_needed", "JiraClient.list_projects", "JiraClient.search", "JiraClient.create", "ConfluenceClient.list_spaces", "ConfluenceClient.search", "ConfluenceClient.create", "http_error", "map_vendor_error"], "search-terms": ["connectors", "jira", "confluence", "connection", "tokens", "OAuth", "API routes", "list projects", "search resources", "create resources", "API endpoints"], "state": 2, "file_id": 28, "knowledge_revision": 485, "git_revision": "6e3f3f04452c9910340ea11332f417be043ebe0a", "revision_history": [{"151": ""}, {"330": "050999a09b790ceb7c6b7f96d5411b60fcdc74b2"}, {"344": "98c6b59c7482973cee0153f948eb6d1b34db4a07"}, {"361": "98c6b59c7482973cee0153f948eb6d1b34db4a07"}, {"485": "6e3f3f04452c9910340ea11332f417be043ebe0a"}], "ctags": [{"_type": "tag", "name": "ConnectionPatch", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^class ConnectionPatch(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "DEFAULT_TTL_SKEW", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^DEFAULT_TTL_SKEW = 120  # seconds before expiry to refresh$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ENABLE_PAT", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^ENABLE_PAT = os.getenv(\"ENABLE_JIRA_PAT\", \"false\").lower() in (\"1\", \"true\", \"yes\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ENABLE_PKCE", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^ENABLE_PKCE = os.getenv(\"ENABLE_OAUTH_PKCE\", \"false\").lower() in (\"1\", \"true\", \"yes\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "OAuthState", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^class OAuthState(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "ToolCall", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^class ToolCall(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_jira_auth_for_tenant", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def _jira_auth_for_tenant(store: TokenStore, tenant_id: str) -> Tuple[JiraAuth, Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Tuple[JiraAuth,Dict[str,Any]]", "kind": "function", "signature": "(store: TokenStore, tenant_id: str)"}, {"_type": "tag", "name": "_save_jira_auth", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def _save_jira_auth(store: TokenStore, tenant_id: str, rec: Dict[str, Any], auth: JiraAuth) -> N/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(store: TokenStore, tenant_id: str, rec: Dict[str, Any], auth: JiraAuth)"}, {"_type": "tag", "name": "_status_from_store", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def _status_from_store(store: TokenStore, tenant_id: str, provider: str) -> ConnectionStatus:$/", "language": "Python", "typeref": "typename:ConnectionStatus", "kind": "function", "signature": "(store: TokenStore, tenant_id: str, provider: str)"}, {"_type": "tag", "name": "_tenant", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def _tenant(tenant_header: Optional[str]) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(tenant_header: Optional[str])"}, {"_type": "tag", "name": "args", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^    args: Dict[str, Any] = Field(default_factory=dict)$/", "language": "Python", "typeref": "typename:Dict[str, Any]", "kind": "variable", "scope": "ToolCall", "scopeKind": "class"}, {"_type": "tag", "name": "base_url", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^    base_url: Optional[str] = Field(None, description=\"Base site URL for the provider\")$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "variable", "scope": "ConnectionPatch", "scopeKind": "class"}, {"_type": "tag", "name": "create_confluence_resource", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def create_confluence_resource($/", "language": "Python", "typeref": "typename:CreateResult", "kind": "function", "signature": "( payload: Dict[str, Any] = Body(...), x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), )"}, {"_type": "tag", "name": "create_jira_resource", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def create_jira_resource($/", "language": "Python", "typeref": "typename:CreateResult", "kind": "function", "signature": "( payload: Dict[str, Any] = Body(...), x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), )"}, {"_type": "tag", "name": "delete_connection", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def delete_connection(provider: str, x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-I/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(provider: str, x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"))"}, {"_type": "tag", "name": "get_connection", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def get_connection(provider: str, x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\")/", "language": "Python", "typeref": "typename:ConnectionStatus", "kind": "function", "signature": "(provider: str, x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"))"}, {"_type": "tag", "name": "invoke_tool", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def invoke_tool(payload: ToolCall, x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(payload: ToolCall, x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"))"}, {"_type": "tag", "name": "list_confluence_spaces", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def list_confluence_spaces($/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "function", "signature": "( x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), limit: int = Query(25, ge=1, le=50), cursor: Optional[str] = Query(None), )"}, {"_type": "tag", "name": "list_connectors", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def list_connectors(x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\")) -> List[Dict/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "function", "signature": "(x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"))"}, {"_type": "tag", "name": "list_jira_projects", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def list_jira_projects($/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "function", "signature": "( x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), limit: int = Query(25, ge=1, le=50), cursor: Optional[str] = Query(None), )"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "nonce", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^    nonce: Optional[str] = None$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "variable", "scope": "OAuthState", "scopeKind": "class"}, {"_type": "tag", "name": "pat", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^    pat: Optional[str] = Field(None, description=\"Optional PAT\\/API key (env gated for Jira)\")$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "variable", "scope": "ConnectionPatch", "scopeKind": "class"}, {"_type": "tag", "name": "patch_connection", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def patch_connection($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( provider: str, payload: ConnectionPatch = Body(...), x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), )"}, {"_type": "tag", "name": "rotate", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^    rotate: Optional[bool] = Field(False, description=\"Rotate access token if supported (OAuth)\"/", "language": "Python", "typeref": "typename:Optional[bool]", "kind": "variable", "scope": "ConnectionPatch", "scopeKind": "class"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^router = APIRouter(prefix=\"\\/connectors\", tags=[\"Connectors\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "search_confluence", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def search_confluence($/", "language": "Python", "typeref": "typename:List[SearchResultItem]", "kind": "function", "signature": "( q: str = Query(\"\", description=\"Search query\"), limit: int = Query(10, ge=1, le=25), filters: Optional[str] = Query(None, description=\"Optional JSON string of filter mapping\"), x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), )"}, {"_type": "tag", "name": "search_jira", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^def search_jira($/", "language": "Python", "typeref": "typename:List[SearchResultItem]", "kind": "function", "signature": "( q: str = Query(\"\", description=\"Search JQL\"), limit: int = Query(10, ge=1, le=25), filters: Optional[str] = Query(None, description=\"Optional JSON string of filter mapping\"), x_tenant_id: Optional[str] = Header(None, alias=\"X-Tenant-Id\"), )"}, {"_type": "tag", "name": "tenant", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/routers/connectors.py", "pattern": "/^    tenant: Optional[str] = None$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "variable", "scope": "OAuthState", "scopeKind": "class"}], "hash": "b74d28ba59e776d74eb9c1dfc2d7337d", "format-version": 4, "code-base-name": "integration_backend", "filename": "integration_backend/src/api/routers/connectors.py", "fields": [{"name": "DEFAULT_TTL_SKEW = 120  # seconds before expiry to refresh", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "ENABLE_PAT = os.getenv(\"ENABLE_JIRA_PAT\", \"false\").lower() in (\"1\", \"true\", \"yes\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "ENABLE_PKCE = os.getenv(\"ENABLE_OAUTH_PKCE\", \"false\").lower() in (\"1\", \"true\", \"yes\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Dict[str, Any] args", "scope": "ToolCall", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[str] base_url", "scope": "ConnectionPatch", "scopeKind": "class", "description": "unavailable"}, {"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Optional[str] nonce", "scope": "OAuthState", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[str] pat", "scope": "ConnectionPatch", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[bool] rotate", "scope": "ConnectionPatch", "scopeKind": "class", "description": "unavailable"}, {"name": "router = APIRouter(prefix=\"\\/connectors\", tags=[\"Connectors\"])", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Optional[str] tenant", "scope": "OAuthState", "scopeKind": "class", "description": "unavailable"}]}