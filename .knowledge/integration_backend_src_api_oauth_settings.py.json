{"is_source_file": true, "format": "Python", "description": "This file manages environment-driven configuration for Atlassian OAuth 2.0 with PKCE in a Python project. It includes functions to construct and validate OAuth settings based on environment variables, normalize URLs, and provide default CORS origins.", "external_files": ["src/startup"], "external_methods": ["os.getenv", "logging.getLogger", "logging.warning", "logging.info", "logging.error"], "published": ["get_atlassian_oauth_config", "get_default_scopes", "get_cors_origins"], "classes": [], "methods": [{"name": "str _normalize_base(url: str)", "description": "Removes trailing slash from a base URL if present.", "scope": "", "scopeKind": ""}, {"name": "str _build_redirect_uri_from_base(base: str)", "description": "Constructs the OAuth callback URL based on the backend public base URL.", "scope": "", "scopeKind": ""}, {"name": "dict get_atlassian_oauth_config()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "List[str] get_cors_origins()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "str get_default_scopes()", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["os.getenv", "logging.getLogger", "logging.warning", "logging.info", "logging.error"], "search-terms": ["oauth", "Atlassian", "PKCE", "environment-based settings", "OAuth configuration", "redirect URI", "CORS origins", "scopes", "get_atlassian_oauth_config"], "state": 2, "file_id": 14, "knowledge_revision": 159, "git_revision": "578c6d17f21ec36ed0102cc502cf09a5c6fadef5", "revision_history": [{"52": ""}, {"60": "837fa352878d17e969ace40bf39f6914f4a39086"}, {"61": "837fa352878d17e969ace40bf39f6914f4a39086"}, {"70": "c93612d2bfe887131d75d6aa4e2e91677266f41a"}, {"80": "c93612d2bfe887131d75d6aa4e2e91677266f41a"}, {"153": "bfdff7245da8e6ccd5a638f7c0975df5e7722a10"}, {"159": "578c6d17f21ec36ed0102cc502cf09a5c6fadef5"}], "ctags": [{"_type": "tag", "name": "_build_redirect_uri_from_base", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/oauth_settings.py", "pattern": "/^def _build_redirect_uri_from_base(base: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(base: str)"}, {"_type": "tag", "name": "_logger", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/oauth_settings.py", "pattern": "/^_logger = logging.getLogger(\"config.oauth\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_normalize_base", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/oauth_settings.py", "pattern": "/^def _normalize_base(url: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(url: str)"}, {"_type": "tag", "name": "get_atlassian_oauth_config", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/oauth_settings.py", "pattern": "/^def get_atlassian_oauth_config() -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get_cors_origins", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/oauth_settings.py", "pattern": "/^def get_cors_origins() -> List[str]:$/", "language": "Python", "typeref": "typename:List[str]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get_default_scopes", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/api/oauth_settings.py", "pattern": "/^def get_default_scopes() -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "()"}], "hash": "6a96bd857728814e55b149a4f49c1d81", "format-version": 4, "code-base-name": "integration_backend", "filename": "integration_backend/src/api/oauth_settings.py", "fields": [{"name": "_logger = logging.getLogger(\"config.oauth\")", "scope": "", "scopeKind": "", "description": "unavailable"}]}