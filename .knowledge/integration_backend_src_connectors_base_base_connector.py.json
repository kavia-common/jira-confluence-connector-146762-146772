{"is_source_file": true, "format": "Python", "description": "This file defines an abstract base class `BaseConnector` for connectors in a software project. It specifies the interface and some shared methods for implementing connectors to external services, including OAuth authorization, connection status, token refresh, search, create, and resource retrieval.", "external_files": ["./models"], "external_methods": ["SearchResultItem", "CreateResult", "ConnectionStatus"], "published": ["BaseConnector"], "classes": [{"name": "BaseConnector", "description": "An abstract base class that provides a standardized interface for connectors to external providers, including methods for OAuth flow, connection status, search, creation, and resource fetching."}], "methods": [{"name": "\"BaseConnector\" with_db(self, db: Any)", "description": "Attaches a database or session handle to the connector instance and returns the connector for chaining.", "scope": "BaseConnector", "scopeKind": "class"}, {"name": "str oauth_authorize_url(self, tenant_id: str, state: Optional[str] = None, scopes: Optional[str] = None)", "description": "Builds a provider-specific OAuth authorization URL.", "scope": "BaseConnector", "scopeKind": "class"}, {"name": "ConnectionStatus oauth_callback(self, code: str, tenant_id: str, state: Optional[str] = None)", "description": "Processes the OAuth callback to exchange code for tokens and persist them.", "scope": "BaseConnector", "scopeKind": "class"}, {"name": "ConnectionStatus connection_status(self, tenant_id: str)", "description": "Returns the current connection status for a given tenant.", "scope": "BaseConnector", "scopeKind": "class"}, {"name": "ConnectionStatus refresh_token_if_needed(self, tenant_id: str)", "description": "Refreshes the OAuth tokens if they are close to expiry, returning the latest connection status.", "scope": "BaseConnector", "scopeKind": "class"}, {"name": "List[SearchResultItem] search(self, query: str, tenant_id: str, limit: int = 10, filters: Optional[Dict[str, Any]] = None)", "description": "Performs a search query against the provider and returns a list of normalized search result items.", "scope": "BaseConnector", "scopeKind": "class"}, {"name": "CreateResult create(self, payload: Dict[str, Any], tenant_id: str)", "description": "Creates a resource on the provider with the given payload and returns a normalized result.", "scope": "BaseConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] get_resource(self, key: str, tenant_id: str)", "description": "Fetches a resource by its key or ID from the provider.", "scope": "BaseConnector", "scopeKind": "class"}], "calls": ["raise NotImplementedError"], "search-terms": ["BaseConnector", "abstract class", "OAuth", "search method", "create method", "connection status", "resource fetch"], "state": 2, "file_id": 41, "knowledge_revision": 336, "git_revision": "", "ctags": [{"_type": "tag", "name": "BaseConnector", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/base/base_connector.py", "pattern": "/^class BaseConnector(ABC):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "connection_status", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/base/base_connector.py", "pattern": "/^    def connection_status(self, tenant_id: str) -> ConnectionStatus:$/", "language": "Python", "typeref": "typename:ConnectionStatus", "kind": "member", "signature": "(self, tenant_id: str)", "scope": "BaseConnector", "scopeKind": "class"}, {"_type": "tag", "name": "connector_id", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/base/base_connector.py", "pattern": "/^    connector_id: str = \"base\"$/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "BaseConnector", "scopeKind": "class"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/base/base_connector.py", "pattern": "/^    def create(self, payload: Dict[str, Any], tenant_id: str) -> CreateResult:$/", "language": "Python", "typeref": "typename:CreateResult", "kind": "member", "signature": "(self, payload: Dict[str, Any], tenant_id: str)", "scope": "BaseConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_resource", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/base/base_connector.py", "pattern": "/^    def get_resource(self, key: str, tenant_id: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, key: str, tenant_id: str)", "scope": "BaseConnector", "scopeKind": "class"}, {"_type": "tag", "name": "oauth_authorize_url", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/base/base_connector.py", "pattern": "/^    def oauth_authorize_url(self, tenant_id: str, state: Optional[str] = None, scopes: Optional[/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, tenant_id: str, state: Optional[str] = None, scopes: Optional[str] = None)", "scope": "BaseConnector", "scopeKind": "class"}, {"_type": "tag", "name": "oauth_callback", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/base/base_connector.py", "pattern": "/^    def oauth_callback(self, code: str, tenant_id: str, state: Optional[str] = None) -> Connecti/", "language": "Python", "typeref": "typename:ConnectionStatus", "kind": "member", "signature": "(self, code: str, tenant_id: str, state: Optional[str] = None)", "scope": "BaseConnector", "scopeKind": "class"}, {"_type": "tag", "name": "refresh_token_if_needed", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/base/base_connector.py", "pattern": "/^    def refresh_token_if_needed(self, tenant_id: str) -> ConnectionStatus:$/", "language": "Python", "typeref": "typename:ConnectionStatus", "kind": "member", "signature": "(self, tenant_id: str)", "scope": "BaseConnector", "scopeKind": "class"}, {"_type": "tag", "name": "search", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/base/base_connector.py", "pattern": "/^    def search(self, query: str, tenant_id: str, limit: int = 10, filters: Optional[Dict[str, An/", "language": "Python", "typeref": "typename:List[SearchResultItem]", "kind": "member", "signature": "(self, query: str, tenant_id: str, limit: int = 10, filters: Optional[Dict[str, Any]] = None)", "scope": "BaseConnector", "scopeKind": "class"}, {"_type": "tag", "name": "with_db", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/base/base_connector.py", "pattern": "/^    def with_db(self, db: Any) -> \"BaseConnector\":$/", "language": "Python", "typeref": "typename:\"BaseConnector\"", "kind": "member", "signature": "(self, db: Any)", "scope": "BaseConnector", "scopeKind": "class"}], "hash": "72554b94c64248a1b0ddc8edd3c81d2b", "format-version": 4, "code-base-name": "integration_backend", "filename": "integration_backend/src/connectors/base/base_connector.py", "fields": [{"name": "str connector_id", "scope": "BaseConnector", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"336": ""}]}