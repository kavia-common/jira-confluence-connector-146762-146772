{"is_source_file": true, "format": "Python", "description": "This file implements a Jira API client for Atlassian Cloud, providing methods to authenticate, refresh tokens, list projects, search issues via JQL, and create issues. It manages OAuth tokens, handles retries, and interacts with Jira's REST API endpoints.", "external_files": [".../db/token_store.py", ".../api/errors.py"], "external_methods": ["get_tokens", "save_tokens", "update_meta", "error_response"], "published": ["JiraClient"], "classes": [{"name": "JiraClient", "description": "A lightweight client to interact with Atlassian Jira's REST API, handling authentication, token refresh, and various Jira operations."}], "methods": [{"name": "Dict[str,Any] ensure_tokens(self)", "description": "Ensures a valid access token is available, refreshes if expiring soon.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "None _refresh(self, refresh_token: str)", "description": "Refreshes the OAuth token using the refresh token.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,str] _authorized_headers(self, token: str)", "description": "Generates headers with Bearer token for authorized API requests.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Tuple[str,str] _cloud_base_and_id(self, access_token: str)", "description": "Discovers or retrieves the Jira cloud base URL and cloud ID, with cache and configuration support.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "httpx.Response _request_with_refresh(self, method: str, url: str, json_body: Optional[Dict[str, Any]] = None, params: Optional[Dict[str, Any]] = None)", "description": "Performs HTTP requests with automatic retry on 401 after token refresh, handles rate limiting.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "List[Dict[str,Any]] list_projects(self)", "description": "Lists Jira projects accessible by the authenticated client.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "List[Dict[str,Any]] search_jql(self, jql: str, limit: int = 10)", "description": "Searches Jira issues using JQL, returning summarized issue data.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "Dict[str,Any] create_issue(self, project_key: str, summary: str, description: Optional[str] = None)", "description": "Creates a new Jira issue with specified project, summary, and optional description.", "scope": "JiraClient", "scopeKind": "class"}, {"name": "__init__(self, tenant_id: str, request_id: Optional[str] = None)", "scope": "JiraClient", "scopeKind": "class", "description": "unavailable"}, {"name": "httpx.Response do_request(tk: str)", "scope": "JiraClient._request_with_refresh", "scopeKind": "member", "description": "unavailable"}], "calls": ["get_tokens", "save_tokens", "update_meta", "error_response", "httpx.Client", "resp.post", "resp.get", "resp.json"], "search-terms": ["JiraClient", "OAuth token refresh", "Jira REST API", "project listing", "issue search", "issue creation", "OAuth credentials environment variables"], "state": 2, "file_id": 37, "knowledge_revision": 332, "git_revision": "98c6b59c7482973cee0153f948eb6d1b34db4a07", "revision_history": [{"320": ""}, {"332": "98c6b59c7482973cee0153f948eb6d1b34db4a07"}], "ctags": [{"_type": "tag", "name": "ATLASSIAN_API", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^ATLASSIAN_API = \"https:\\/\\/api.atlassian.com\"$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ATLASSIAN_AUTH", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^ATLASSIAN_AUTH = \"https:\\/\\/auth.atlassian.com\"$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "DEFAULT_TIMEOUT", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^DEFAULT_TIMEOUT = 20.0$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "EARLY_REFRESH_WINDOW_SEC", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^EARLY_REFRESH_WINDOW_SEC = 120  # refresh if expiring within 2 minutes$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "JiraClient", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^class JiraClient:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "LOG", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^LOG = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^    def __init__(self, tenant_id: str, request_id: Optional[str] = None):$/", "language": "Python", "kind": "member", "signature": "(self, tenant_id: str, request_id: Optional[str] = None)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_authorized_headers", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^    def _authorized_headers(self, token: str) -> Dict[str, str]:$/", "language": "Python", "typeref": "typename:Dict[str,str]", "kind": "member", "signature": "(self, token: str)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_cloud_base_and_id", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^    def _cloud_base_and_id(self, access_token: str) -> Tuple[str, str]:$/", "language": "Python", "typeref": "typename:Tuple[str,str]", "kind": "member", "signature": "(self, access_token: str)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_refresh", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^    def _refresh(self, refresh_token: str) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, refresh_token: str)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "_request_with_refresh", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^    def _request_with_refresh(self, method: str, url: str, json_body: Optional[Dict[str, Any]] =/", "language": "Python", "typeref": "typename:httpx.Response", "kind": "member", "signature": "(self, method: str, url: str, json_body: Optional[Dict[str, Any]] = None, params: Optional[Dict[str, Any]] = None)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "create_issue", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^    def create_issue(self, project_key: str, summary: str, description: Optional[str] = None) ->/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, project_key: str, summary: str, description: Optional[str] = None)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "do_request", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^        def do_request(tk: str) -> httpx.Response:$/", "file": true, "language": "Python", "typeref": "typename:httpx.Response", "kind": "function", "signature": "(tk: str)", "scope": "JiraClient._request_with_refresh", "scopeKind": "member"}, {"_type": "tag", "name": "ensure_tokens", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^    def ensure_tokens(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "http_status", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^from fastapi import status as http_status$/", "language": "Python", "kind": "unknown", "nameref": "unknown:status"}, {"_type": "tag", "name": "list_projects", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^    def list_projects(self) -> List[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "member", "signature": "(self)", "scope": "JiraClient", "scopeKind": "class"}, {"_type": "tag", "name": "search_jql", "path": "/home/kavia/workspace/code-generation/jira-confluence-connector-146762-146772/integration_backend/src/connectors/jira/client.py", "pattern": "/^    def search_jql(self, jql: str, limit: int = 10) -> List[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "member", "signature": "(self, jql: str, limit: int = 10)", "scope": "JiraClient", "scopeKind": "class"}], "hash": "3f548f0379296a8d6e9002affedd20c2", "format-version": 4, "code-base-name": "integration_backend", "filename": "integration_backend/src/connectors/jira/client.py", "fields": [{"name": "ATLASSIAN_API = \"https:\\/\\/api.atlassian.com\"", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "ATLASSIAN_AUTH = \"https:\\/\\/auth.atlassian.com\"", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "DEFAULT_TIMEOUT = 20.0", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "EARLY_REFRESH_WINDOW_SEC = 120  # refresh if expiring within 2 minutes", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "LOG = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}]}